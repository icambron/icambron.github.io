<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Isaac Cambron</title>
  <id>http://isaaccambron.com/blog</id>
  <link href="http://isaaccambron.com/blog"/>
  <link href="http://isaaccambron.com/blog/feed.xml" rel="self"/>
  <updated>2016-01-05T19:00:00-05:00</updated>
  <author>
    <name>Isaac Cambron</name>
  </author>
  <entry>
    <title>Will Wilkinson on Extremism and Libertarianism</title>
    <link rel="alternate" href="http://isaaccambron.com/blog/2016/01/06/wilkinson-on-libertariansim.html"/>
    <id>http://isaaccambron.com/blog/2016/01/06/wilkinson-on-libertariansim.html</id>
    <published>2016-01-05T19:00:00-05:00</published>
    <updated>2018-04-02T23:23:40-04:00</updated>
    <author>
      <name>Isaac Cambron</name>
    </author>
    <content type="html">&lt;p&gt;Will Wilkinson has a &lt;a href="https://novirtue.org/on-the-saying-that-extremism-in-defense-of-liberty-is-no-vice/"&gt;piece&lt;/a&gt; on Barry Goldwater&amp;rsquo;s line &amp;ldquo;Extremism in defense of liberty is no vice&amp;rdquo;. I guess the idea is to use his criticism of that line as a sort launching point for a larger discussion about libertarianism. I don&amp;rsquo;t have any particularly strong opinions about libertarianism as a whole and I have no special affinity for that quote, but I think the piece ends up being pretty empty.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what seems like the core of the argument:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If, as Aristotle says, virtue is a mean between a vice of excess and a vice of deficiency&amp;mdash;a middle-ground between two extremes&amp;mdash;then to be virtuous is to have a certain kind of moderate temper. Extremes are vices by definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We also have that violence is part of the extremism bundle:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The questionable character of extremism is anyway right there on the surface of our ordinary understanding of the term. There is a whiff of violence, or at least danger, about extremism. Extremists reject mainstream opinion, including mainstream opinion about acceptable political tactics. To embrace extremism in defense of something is to at least flirt with the idea that violence isn’t out of the question.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will give Wilkinson that no one&amp;rsquo;s moral system holds violence to be a virtue in itself, so I&amp;rsquo;m on board with this labeling. And if he wants to define virtue in such a way that it precludes extremism, who am I to argue, except to point out that sometimes maybe we shouldn&amp;rsquo;t be virtuous? But the problem is that Wilkinson doesn&amp;rsquo;t really believe that extremism=non-virtue is tautological for any useful sense of virtue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Throughout its history, America’s white supremacist institutions have been so violently opposed to the liberty of black people that it was not unreasonable to believe that something extreme might need to be done to finally win them a modicum of freedom.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sometimes circumstances legitimately call for extreme measures. A civil war to free enslaved human beings would be a good example. Goldwater’s example, D-Day, is another case in which extreme, extremely violent, measures were not unvirtuously excessive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think there&amp;rsquo;s a great deal of danger in throwing around Aristotle&amp;rsquo;s definition of virtue haphazardously. It&amp;rsquo;s not that it&amp;rsquo;s wrong, it&amp;rsquo;s that it asks &amp;ldquo;excess&amp;rdquo; and &amp;ldquo;deficiency&amp;rdquo; to do the heavy lifting, while simultaneously relegating them to the background. Virtue is staying well between some hash marks, but who sets those hash marks, and are they set right? And in that last quotation, look how much work &amp;ldquo;legitimately&amp;rdquo; is doing. Extremism is unvirtuous except when it&amp;rsquo;s actually justified. In the case of, say, slavery, the problem is precisely that the hash marks were set so insanely wrong by society at large. How extreme of action your moral framework justifies is a function of how different the hegemonic definition of &amp;ldquo;excess&amp;rdquo; and &amp;ldquo;deficiency&amp;rdquo; differ from your moral framework&amp;rsquo;s. &lt;strong&gt;So &amp;ldquo;when is violent action justified?&amp;rdquo; is the actual question here&lt;/strong&gt;, the thing on which the quote&amp;rsquo;s truth (or at least value) hinges. Its answer is &amp;ldquo;when it&amp;rsquo;s in defense of liberty&amp;rdquo;. Wilkinson disagrees, obviously, but doesn&amp;rsquo;t really tell us why. The concluding paragraph gives us a hint:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you’re engaged in a literal war between good and evil, then maybe you’ve got to do what it takes and kill people. But politics is not war. If you’re a senator from Arizona, or a think tank scholar engaged in normal domestic politics of a stable liberal democracy, extremism is no virtue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But just a hint. Politics clearly can be war&amp;mdash;the American Revolution was a political war&amp;mdash;but I think Wilkinson simply means everyday American politics. If the argument is merely that the stakes are too low to justify violent action&amp;mdash;that the moral calculus doesn&amp;rsquo;t add up&amp;mdash;then I agree, but then I wonder what bearing all the preceding paragraphs have. Perhaps the point is that Goldwater is wrong because he leaves out even a handwavy notion of proportionality; it&amp;rsquo;s clearly untrue that &lt;em&gt;any&lt;/em&gt; imposition on your freedom justifies &lt;em&gt;any&lt;/em&gt; action. But who interprets the line that way? No one, apparently:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Almost everyone who repeats Goldwater’s slogan is guilty of hyperbole and doesn’t really mean what they’re saying. Barry Goldwater himself certainly didn’t think that it is “no vice” to murder scores of innocent people in defense of liberty.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In fact, Wilkinson doesn&amp;rsquo;t even think the quote itself implies that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That said, if extremism in defense of liberty is warranted, it doesn’t quite follow that it’s okay to use any means necessary to that defense. (Malcolm X certainly would not have endorsed, say, the nuclear annihilation of Manhattan in exchange for the end of systemic racial oppression in America.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Certainly, Goldwater himself had a hard time articulating how the imposition of being forced to let black people use your supposedly public bathroom can be usefully compared to the threat of Axis domination of the world, and thus justifies morally equivalent action. But as Wilkinson points out, &amp;ldquo;it requires a special sort of obtuseness to insist that Goldwater was only making some sort of abstract, historically acontextual point about the politics of liberty.&amp;rdquo; In other words, the reason that Goldwater thought the delta between how the world ought to work and how it works was only sufficiently big, in his mind, to justify violence is that he was profoundly racist. Which doesn&amp;rsquo;t tell us anything other than racism can make people jerks.&lt;/p&gt;

&lt;p&gt;On the one hand, I&amp;rsquo;d certainly be sympathetic to the point that the &amp;ldquo;extremism in defense of liberty is no vice&amp;rdquo; doesn&amp;rsquo;t really constitute a principled moral position, that it isn&amp;rsquo;t dispositive on any actual questions of right and wrong. But on the other hand, that&amp;rsquo;s also why, once we&amp;rsquo;ve waded through a lot of definitional fiat, it ends up being a banal point to quibble with. What&amp;rsquo;s missing here is an engagement with the moral philosophy of libertarianism as it relates to this quote: when &lt;em&gt;should&lt;/em&gt; you resort to extreme measures on behalf of freedom, and how does that compare to how people apply that line?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Transducer Composition</title>
    <link rel="alternate" href="http://isaaccambron.com/blog/2014/12/13/transducer-composition.html"/>
    <id>http://isaaccambron.com/blog/2014/12/13/transducer-composition.html</id>
    <published>2014-12-12T19:00:00-05:00</published>
    <updated>2018-04-02T23:23:40-04:00</updated>
    <author>
      <name>Isaac Cambron</name>
    </author>
    <content type="html">&lt;p&gt;My &lt;a href="http://zensight.co"&gt;startup&lt;/a&gt; has been building our product in Clojure. It&amp;rsquo;s been awesome, and overall, it&amp;rsquo;s been pretty easy to learn and be productive with, since our team was already in a functional programming mindset. But we&amp;rsquo;re still learning some of the edges. Specifically, today I was trying out a newish feature called &lt;a href="http://clojure.org/transducers"&gt;transducers&lt;/a&gt;, which allow you to compose transformations on data without having to care much about its &amp;ldquo;container&amp;rdquo; type, so long as that container provides a way to reduce itself.&lt;/p&gt;

&lt;p&gt;Just playing around with it, I got confused for a bit that my transducers kept composing in the opposite order I expected. Specifically, this (which I&amp;rsquo;ll explain in a second):&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; (3 5 7)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;;;vs the ol' fashioned, non-tranducery:&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; (4 6 8)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It turns out I&amp;rsquo;d missed that the docs mention that explicitly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The composed xf transducer will be invoked left-to-right&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It took me a bit to figure out what was happening at all, and when it dawned on me (&amp;ldquo;oh, it goes the other way!&amp;rdquo;), I wondered &lt;em&gt;why the hell does it do that?&lt;/em&gt; I asked about it on the ClojureScript IRC channel, where &lt;a href="https://twitter.com/swannodette"&gt;David Nolen&lt;/a&gt; told me to go look at the source. That&amp;rsquo;s a totally fine answer (it&amp;rsquo;s not his job to sit around and write out detailed answers to my questions), but it&amp;rsquo;s of course more useful if there&amp;rsquo;s an explanation written up, hence this post.&lt;/p&gt;

&lt;p&gt;I actually didn&amp;rsquo;t look at the source; instead, I took a nap and when I woke up I was pretty confident I knew the answer.&lt;/p&gt;

&lt;h2&gt;A quick review of composition&lt;/h2&gt;

&lt;p&gt;The order of composition obviously matters; &lt;code&gt;f(g(x))&lt;/code&gt; is not the same of &lt;code&gt;g(f(x))&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; 6, the result of (doubler (inc 2))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; 5, the result (inc (doubler 2))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to apply that composition to each element of a sequence, you&amp;rsquo;d do something like:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; (4 6 8)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But perhaps you have a bunch of functions that operate on sequences, and you want to compose &lt;em&gt;those&lt;/em&gt;. You end up with the uglier, less efficient, and no less correct composition of maps:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; (4 6 8)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Transducers, briefly&lt;/h2&gt;

&lt;p&gt;Transducers manage to compose the same sort of transformations, but do it in a way that doesn&amp;rsquo;t create intermediate sequences (even lazy ones) and for which the transformations themselves are agnostic about what kind of container they&amp;rsquo;re transforming elements from (or into). It does this by defining various transformations (e.g. &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc) in terms of &lt;code&gt;reduce&lt;/code&gt; and then parameterizing them with the reduce function itself. So &lt;code&gt;map&lt;/code&gt; in the transducer world doesn&amp;rsquo;t mean &amp;ldquo;take each element from a sequence and call this function on them and put the results in another sequence&amp;rdquo;. It means &amp;ldquo;given some way (let&amp;rsquo;s call it foo) of reducing something,  give me a way of reducing things that increments each thing and then reduces it with foo&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;You create a transducer by calling one of the standard listy functions without a collection arg, like &lt;code&gt;(map inc)&lt;/code&gt;. That transducer can be handed to pieces of machinery that know what transducers mean, like the &lt;code&gt;transduce&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;transduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;conj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; [2 3 4]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;transduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; 9&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&amp;rsquo;s really neat is that different containery things can implement &lt;code&gt;reduce&lt;/code&gt; differently without having to define its own specific transformations (or even make you do it differently for your different use cases). For example, you could use some transducers you built to transform a vector, while your core.async channels can use &lt;em&gt;the same transducers&lt;/em&gt; to transform values pushed through them. That works because those async channels can provide their own definition of reduce, and the transducers only depend on that having the right shape.&lt;/p&gt;

&lt;p&gt;OK, so that&amp;rsquo;s a terse introduction, but for more, go watch &lt;a href="https://www.youtube.com/watch?v=6mTbuzafcII"&gt;the StrangeLoop talk&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Reversals&lt;/h2&gt;

&lt;p&gt;So why does composing transducers mean they get evaluated &amp;ldquo;backwards&amp;rdquo; or &amp;ldquo;inside out&amp;rdquo;? Well, on reflection, it makes a lot of sense. What transducers really do is &lt;em&gt;transform reducing functions&lt;/em&gt;, not actual values; they take one reducing function and return another one that works by transforming its values and passing the results to that passed-in reducing function. When you compose them, you&amp;rsquo;re using the function returned by the &amp;ldquo;inner&amp;rdquo; transducer as the reduction function for the &amp;ldquo;outer&amp;rdquo; transducer. So if I have &lt;code&gt;(comp (map double) (map inc))&lt;/code&gt;, I&amp;rsquo;m saying that &lt;code&gt;(map inc)&lt;/code&gt; provides a reducing function that takes a value, increments it, and feeds into the reducing function it gets passed. I&amp;rsquo;m then passing &lt;em&gt;that&lt;/em&gt; reducing function into the doubling tansducer, which returns another reducing function that doubles the values and &lt;em&gt;then&lt;/em&gt; feeds the answer into the map-incrementing reducer the doubler took as an argument. So double then inc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instead of bubbling values out like in a simple compose, you&amp;rsquo;re building a set of concentric spheres, each capable of taking a value from the outside and pushing it in.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll make that more concrete in a moment, but first, note that this inside-outness is a common feature of composed higher order functions that use their arguments as their &amp;ldquo;outermost&amp;rdquo; invocation. Compare our original composed maps to these, which also don&amp;rsquo;t use transducers at all:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre-inc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre-doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre-doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre-inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; 5&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre-doubler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre-inc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; (3 5 7), all backwardslike&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that makes sense to you, the next part will be easy. One interesting way to better understand all this is to implement a simplified version of transducers. We&amp;rsquo;ll skip a bunch of complications, like stateful transducers, and we won&amp;rsquo;t bother with a really important thing about transducers: making the actual reduction polymorphic. But here goes:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my-transduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reducer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;todo: this should depend on the type of coll&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;reducer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my-into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my-transduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;conj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my-map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;rf is like conj or +&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;can be passed to a reducing function&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;this is the inversion that answers the question&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my-into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;comp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my-map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my-map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;;=&amp;gt; [3,5,7]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s the whole thing. &lt;code&gt;my-map&lt;/code&gt; returns a transducer, i.e. a function that takes a reducing function and returns a different one. Since it does its transformation and then delegates the actual core reduction work to its argument, the order of composition &lt;em&gt;from the standpoint of the individual values&lt;/em&gt; is&amp;hellip;well, I still say it&amp;rsquo;s backwards. But it makes good sense.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Kickstarter is for suckers</title>
    <link rel="alternate" href="http://isaaccambron.com/blog/2014/03/26/kickstarter-is-for-suckers.html"/>
    <id>http://isaaccambron.com/blog/2014/03/26/kickstarter-is-for-suckers.html</id>
    <published>2014-03-25T20:00:00-04:00</published>
    <updated>2018-04-02T23:23:40-04:00</updated>
    <author>
      <name>Isaac Cambron</name>
    </author>
    <content type="html">&lt;p&gt;There was a recent &lt;a href="http://blogs.wsj.com/digits/2014/03/25/aug-1-2012-when-oculus-asked-for-donations/"&gt;article&lt;/a&gt; in the Wall Street Journal about how all of the people who gave Occulus money feel a bit screwed by the acquisition. I think the article has some flaws, but it reminded me of a point I&amp;rsquo;ve been making recently. I posted a short writeup of that point on Hacker News, and I like how it turned out enough to post it here (with some minor edits):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ll just say it: Kickstarter is for suckers. When you give money to a project, you&amp;rsquo;re doing one of two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Making a donation to a company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Preordering something that hasn&amp;rsquo;t been built yet.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Doing 1 is silly, since you don&amp;rsquo;t really get anything in return. &amp;ldquo;But it makes it more likely that this thing I want will happen!&amp;rdquo; In some tiny marginal way, sure, but mostly it&amp;rsquo;s going to happen because other people donate (or fails to happen because they don&amp;rsquo;t). Don&amp;rsquo;t be the fool who tries to personally take on the collective action problem. And stop trying to make other people rich out of the goodness of your heart.&lt;/p&gt;

&lt;p&gt;Of course, as the WSJ fails to make clear, most of Oculus&amp;rsquo;s Kickstarter money wasn&amp;rsquo;t straight-up donations; it was preorders of the Rift. That&amp;rsquo;s obviously not a donation, but it&amp;rsquo;s not a good idea either. As the buyer, you bear the risk that it never ships at all. &amp;ldquo;But I&amp;rsquo;m compensated with a discount!&amp;rdquo; Essentially, you&amp;rsquo;re making an investment in which your returns come in the form of future discounts on a product. Forget that you like the Oculus Rift for a second; is this a wise investment structure? If someone set up a VC company that did that instead of buying parts of companies, would you think that was smart? Did you do any kind of analysis that suggests this is actually works out to be a good investment? Do the potential returns even justify that analysis? Do you think of other consumer products this way, or only shiny electronic things?&lt;/p&gt;

&lt;p&gt;Will you even get a discount? Why would you?&lt;/p&gt;

&lt;p&gt;Or to think about it a different way: imagine if someone set up a store that worked like this: you take your item to the counter, where they don&amp;rsquo;t actually let you buy the item. Instead what you can do is pay the price minus n% and then they roll this big roulette wheel to decide whether you get the product (m% success rate). If you win you get to keep the product and if you lose it goes back on the shelf and they keep your money. To spice things up, they don&amp;rsquo;t tell you what n and m are either, just the price to play and whether you get the item. Now, it&amp;rsquo;s possible&amp;mdash;though unknown&amp;mdash;that m and n work out that you&amp;rsquo;re EV positive here. But would you really shop at that store? Especially when there&amp;rsquo;s another store next door that just sells you the same stuff at a known price (i.e. just buy the Rift when it comes out).&lt;/p&gt;

&lt;p&gt;The fact of the matter is that you&amp;rsquo;re aren&amp;rsquo;t pre-buying the Rift on a rational basis. You&amp;rsquo;ve been convinced by clever marketing to shoulder risk for a company because it &lt;em&gt;seems cool and feels good&lt;/em&gt;. Total sucker move. That probably explains why it tastes bitter when the company whose capital requirements you fronted rolls that into a $2 billion dollar acquisition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The original is &lt;a href="https://news.ycombinator.com/item?id=7471691"&gt;here&lt;/a&gt; if you want to see the responses.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing FbFriends</title>
    <link rel="alternate" href="http://isaaccambron.com/blog/2012/12/25/introducing-fb-friends.html"/>
    <id>http://isaaccambron.com/blog/2012/12/25/introducing-fb-friends.html</id>
    <published>2012-12-24T19:00:00-05:00</published>
    <updated>2018-04-02T23:23:40-04:00</updated>
    <author>
      <name>Isaac Cambron</name>
    </author>
    <content type="html">&lt;p&gt;FbFriends is a new jQuery plugin for picking Facebook friends from a
dialog using the Facebook JS SDK. It&amp;rsquo;s written in CoffeeScript and Less;
you can find the docs and demos &lt;a href="http://icambron.github.com/fbfriends"&gt;here&lt;/a&gt; and
the code &lt;a href="http://github.com/icambron/fbfriends"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the lazy, here&amp;rsquo;s a screenshot (and apologies to my friends who showed up here):&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/images/fbfriends_screen.png" alt="FbFriends" /&gt;&lt;/p&gt;

&lt;p&gt;Go check it out; I think it&amp;rsquo;s pretty cool.&lt;/p&gt;

&lt;p&gt;Not a ton to say, but here are a few interesting notes about it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I went with the idea that the caller has to provide the dialog
component. It just seemed dumb to bake in my own and likely you&amp;rsquo;ll want to make
it look consistent with the dialogs/modals/whatever in the rest of
your app. So you provide callbacks to open and close whatever
dialog you want. FbFriends just provides the content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I really didn&amp;rsquo;t want to build this. In fact, the Facebook SDK used to
have this ability, and they dropped support for it. I wish they hadn&amp;rsquo;t.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lot of Quarrels Harris Port was consumed during the making of this
library.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oh, and Merry Christmas!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing Timestack</title>
    <link rel="alternate" href="http://isaaccambron.com/blog/2012/08/27/introducing-timestack.html"/>
    <id>http://isaaccambron.com/blog/2012/08/27/introducing-timestack.html</id>
    <published>2012-08-26T20:00:00-04:00</published>
    <updated>2018-04-02T23:23:40-04:00</updated>
    <author>
      <name>Isaac Cambron</name>
    </author>
    <content type="html">&lt;p&gt;This probably won&amp;rsquo;t render correctly in your RSS reader. If not, click through.&lt;/p&gt;

&lt;h3&gt;TL;DR&lt;/h3&gt;

&lt;p&gt;This is Timestack:&lt;/p&gt;

&lt;script src='http://icambron.github.com/timestack/files/moment.min.js'&gt;&lt;/script&gt;

&lt;script src='http://icambron.github.com/timestack/files/timestack.min.js'&gt;&lt;/script&gt;

&lt;p&gt;&lt;link rel='stylesheet' type='text/css' href='http://icambron.github.com/timestack/files/timestack.css'&gt;&lt;/p&gt;

&lt;script&gt;
  $(function(){
    $("#timestack").timestack({
     span: 'hour',
      data: [
        {
          title: 'Bob OOO',
          start: '2012-08-26T09:00',
          end: '2012-08-26T17:00',
          color: 'rgb(149, 203, 255)'
        },
        {
          title: 'Meeting',
          start: '2012-08-26T09:00',
          end: '2012-08-26T10:00',
          color: 'rgb(255, 149, 192)'
        },
        {
          title: 'Lunch',
          start: '2012-08-26T12:00',
          end: '2012-08-26T13:00',
          color: 'rgb(151, 255, 177)'
        },
        {
          title: 'Code review',
          start: '2012-08-26T12:30',
          end: '2012-08-26T15:30',
          color: 'rgb(255, 149, 192)'
        }
      ]
    });
  });
&lt;/script&gt;

&lt;div id='timestack'&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s a jQuery plugin I wrote that turns unordered lists into nifty timelines. Docs &lt;a href="http://icambron.github.com/timestack/"&gt;here&lt;/a&gt;. Code &lt;a href="https://github.com/icambron/timestack"&gt;here&lt;/a&gt;. Check it out.&lt;/p&gt;

&lt;h3&gt;Why did I build it?&lt;/h3&gt;

&lt;p&gt;Timestack is a small library and didn&amp;rsquo;t take long to write, but I had a few thoughts about the process that I wanted to share.&lt;/p&gt;

&lt;p&gt;When you build software for a living, you make a lot of compromises. You start with a vision of what you want to build, you get to work, and you run into obstacles. Maybe the technology you wanted to use doesn&amp;rsquo;t exist. Maybe it does exist but doesn&amp;rsquo;t work the way you wanted it to. Sometimes the right thing to do is to fix that technology or just build your own before moving on to the actual work. But usually that&amp;rsquo;s not the right move. Usually, you compromise your vision, make do with the pieces you have, make some quirky work-arounds, and move on. If you don&amp;rsquo;t, you&amp;rsquo;ll end up rewriting your entire stack from scratch to make every little part &lt;em&gt;just right&lt;/em&gt; and you&amp;rsquo;ll never actually get anything done. You&amp;rsquo;ll have a bunch of (maybe) cool infrastructure for something that hasn&amp;rsquo;t been built yet. Knowing when and how to make this kind of tradeoff is part of being a good engineer.&lt;/p&gt;

&lt;p&gt;One of the nice things about a personal side project is that it allows you to absolutely, totally ignore that whole last paragraph. You can compromise as much or as little as you want. And if you&amp;rsquo;re like me, personal projects are an awesome opportunity to solve problems totally tangential to your goal, getting distracted by problems you encounter solving those tangential problems, and so on into fractal oblivion. That&amp;rsquo;s just fun. That&amp;rsquo;s what a personal project &lt;em&gt;is&lt;/em&gt;. If I had to actually deliver it, even to myself, it would be a job. Jobs are fine, but they&amp;rsquo;re not the best context for depth-first exploration.&lt;/p&gt;

&lt;p&gt;Anyway, here I was trying to make a nice interactive resume for a simple &amp;ldquo;Hi, I&amp;rsquo;m Isaac. I build things.&amp;rdquo; website. I wanted a timeline that showed when I worked where, because I think that&amp;rsquo;s more interesting than a boring bulleted list. I looked around and there are a few components out there that do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://simile-widgets.org/timeline/"&gt;MIT Simile&amp;rsquo;s timeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://timeline.verite.co/"&gt;Timeline.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After trying out Timeline (it is pretty), I decided it was too big and heavyweight&amp;mdash; it&amp;rsquo;s a timeline, not an application framework. It doesn&amp;rsquo;t need themes or its own script loader. Importantly, it also didn&amp;rsquo;t really do what I wanted, partially because it imposes some constraints I don&amp;rsquo;t like, and partially because it just isn&amp;rsquo;t meant for my use case. Simile is similar, but unmaintained and worse looking. I wanted something really simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It should turn some list items into timeline bars. No-JS fallback FTW.&lt;/li&gt;
&lt;li&gt;It should create an interval key (the times at the bottom).&lt;/li&gt;
&lt;li&gt;It should be able to do stuff when the user clicks on the timeline items. Note that I don&amp;rsquo;t want it to show me stuff; I just want a callback. Component does less = more flexibility for the user.&lt;/li&gt;
&lt;li&gt;It should be small, simple, and hackable. Libraries for handling simple things should be simple, and tweaking them should be trivial.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not important that it work in old browsers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So I put aside the website and jumped down the rabbit hole.&lt;/p&gt;

&lt;h3&gt;Notes on building it&lt;/h3&gt;

&lt;p&gt;Since I&amp;rsquo;m terrible at UI design, I looked around and quickly found Matt Bango&amp;rsquo;s &lt;a href="http://mattbango.com/notebook/web-development/pure-css-timeline/"&gt;Pure CSS Timeline&lt;/a&gt;. It looks pretty good and the CSS is simple. It&amp;rsquo;s hand-cranked, though; the widths of the bars are just hardcoded for the particular times he needed. So all I had to do was write some code to generate those widths. I also added colors, because why not?&lt;/p&gt;

&lt;p&gt;Some things I think I know now:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The look and feel of web UI widgets should be customized by the user through CSS. CSS already gives you inheritance, overrides, and all that jazz. Just keep it simple and tell your users to override the CSS you ship. Easy.&lt;/li&gt;
&lt;li&gt;Give widgets a width of 100%. The user can decide how big to make the container box.&lt;/li&gt;
&lt;li&gt;Go for cheap extensibility over configuration. Instead of adding a whole bunch of flags into the options list, I just put the functions I wanted to make customizable into the options defaults and let the users override them.&lt;/li&gt;
&lt;li&gt;When dealing with tricky spacing problems in HTML, use &lt;a href="http://css-tricks.com/box-sizing/"&gt;box-sizing: border-box&lt;/a&gt;. It&amp;rsquo;s takes away that problem where you need to set the div width to &lt;code&gt;realWidth - border - padding&lt;/code&gt;, which would have been really painful here. In fact, I&amp;rsquo;m increasingly convinced that border-box should just be the default browser behavior.&lt;/li&gt;
&lt;li&gt;If you need to work with dates and times in JS, you should use &lt;a href="http://momentjs.com"&gt;Moment&lt;/a&gt;. It&amp;rsquo;s just more pleasant than dealing with native dates and times.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to know more about Timestack itself, definitely go &lt;a href="http://icambron.github.com/timestack/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What I want from Sublime</title>
    <link rel="alternate" href="http://isaaccambron.com/blog/2012/07/21/sublime-revisited.html"/>
    <id>http://isaaccambron.com/blog/2012/07/21/sublime-revisited.html</id>
    <published>2012-07-20T20:00:00-04:00</published>
    <updated>2018-04-02T23:23:40-04:00</updated>
    <author>
      <name>Isaac Cambron</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been &lt;a href="/blog/another_year_another_editor.html"&gt;using Sublime Text 2&lt;/a&gt; for 7 months now, and it well past time for me to take a step back and evaluate things. In general, it&amp;rsquo;s a great editor, but there are now one too many things about that bug me. I wanted to write them up. Maybe someone will tell me how to fix them. Maybe they&amp;rsquo;ll actually get fixed by the author. Maybe I&amp;rsquo;ll just feel better having gotten it off my chest.&lt;/p&gt;

&lt;p&gt;If any of this sounds nitpicky, I should point out that I spent like 10 hours per day in this program, so what might seem like minor nuisances add up very quickly. Programming is really just a particular kind of text editing, and we ought to have really well-oiled text editor programs. That&amp;rsquo;s partially for efficiency, and that&amp;rsquo;s partly for our happiness. If you were to respond to that by pointing out that if I feel that way, I should really invest more time customizing my editor, I wouldn&amp;rsquo;t disagree. I should probably dig in, learn my way around the API super well, and make it do what I want it to do. But since it&amp;rsquo;s easier to complain about it on the internet, I&amp;rsquo;m going to do that. Then I&amp;rsquo;ll look into fixing it.&lt;/p&gt;

&lt;p&gt;It may also be that there are configuration options I don&amp;rsquo;t about that could fix this stuff. If so, I&amp;rsquo;d love to hear them.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my laundry list.&lt;/p&gt;

&lt;h3&gt;I want set_mark, yank, and so on to work a bit differently&lt;/h3&gt;

&lt;p&gt;One thing I think is profoundly annoying are the disjunctions between cut and delete-to-mark and between paste and yank.&lt;/p&gt;

&lt;p&gt;For the uninitiated, in Emacs-speak, you set a mark (usually with ctrl+space), which is a sort of bookmark in the document. Then you move your caret around to wherever you want and then you &amp;ldquo;kill the region&amp;rdquo; (which really just means &amp;ldquo;cut&amp;rdquo;) between your caret and the mark you set before. Later you can &amp;ldquo;yank&amp;rdquo; (basically paste) that text back in. So the big difference here is that the region you keep is modal instead of being an explicit selection (the other big difference is that Emacs keeps a full history of your kills so you can do fancier stuff, but that&amp;rsquo;s not important here).&lt;/p&gt;

&lt;p&gt;Sublime has support for this: you can set a mark, you can kill the region, you can yank the region, and you convert the region into a selection. So far so good, but here&amp;rsquo;s the issue: kill/yank and the more standard copy/paste use completely separate buckets to hold stuff. That might sound useful, but in practice it means I have to keep track of (and map) four commands instead of two. Want to paste in something from another program? Use paste. Want to paste in something I killed? Yank. Want to cut something I have selected with the mouse? Use cut then paste, not kill then yank. And we haven&amp;rsquo;t event talked about copy. So that&amp;rsquo;s annoying.&lt;/p&gt;

&lt;p&gt;I could get around this by by setting a mark, going where I want to go, using the select_region command, and then cutting. Then I could always use paste. That would work, but it&amp;rsquo;s an extra command (and keybinding) just to kill some text. It&amp;rsquo;s also a deeper problem than just kill/cut: more complicated manifestation is that I can&amp;rsquo;t use to create a region and then hit Tab to add a tab to each line, because that command works on the selection, not this weird other region thing. The issue is that regions and selections are different things.&lt;/p&gt;

&lt;p&gt;Slight aside: I&amp;rsquo;ve been using &lt;a href="https://github.com/stiang/EmacsKillRing"&gt;EmacsKillRing plugin&lt;/a&gt; that partially fixes at least the cut/paste part of this and adds some other Emacsy goodness, but it doesn&amp;rsquo;t really solve the issue that the region isn&amp;rsquo;t a first-class selection, and it has plenty of other issues too.&lt;/p&gt;

&lt;p&gt;Anyway, what I want&amp;mdash;I think, anyway&amp;mdash;is just a select lock command. Instead of set_mark, I just want to say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Look, I want my selection to start here. Wherever I go with caret, have the selection follow me, like how it does if I hit shift+up. Then treat my actions like you normally would. Cut cuts, Copy copies, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That would add a total of one command and (for my purposes), get rid of all the kill/yank/region stuff. I&amp;rsquo;m a total noob when it comes to customizing ST2, but it seems kinda hard to implement as a plugin: would each command that moves the caret need to be aware of it? Do the actions that get rid of the selection have to be aware of it? It seems like I&amp;rsquo;d have to create my own versions of a lot of editing features to make it work. Or is there something simple I could be doing here?&lt;/p&gt;

&lt;h3&gt;The spellcheck face needs to be customizable&lt;/h3&gt;

&lt;p&gt;This is really only a problem for me when I&amp;rsquo;m writing blog posts, but since that&amp;rsquo;s what I&amp;rsquo;m doing right now, I&amp;rsquo;m going to complain about it. Spell-as-you-type uses a red squiggly underline, which is very painful to look at with a dark background:&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/images/death_to_retinas.png" alt="My eyes!" /&gt;&lt;/p&gt;

&lt;p&gt;I was unable to find a way to change that, and I did find some posts to the effect of &amp;ldquo;yeah, you can&amp;rsquo;t change that&amp;rdquo;. Bummer.&lt;/p&gt;

&lt;h3&gt;Opening an already-open file should move it to the right group&lt;/h3&gt;

&lt;p&gt;Sublime has groups, which allow you to split the screen. Files can be moved from group to group so that you can manage your workspace. And you can switch between them easily with the keyboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/images/sublime.png"&gt;&lt;img src="/blog/images/sublime_small.png" alt="Splities" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another nice feature of ST is the &amp;ldquo;find a file dialog&amp;rdquo;, which allows you to open any file in your project via an autocompleting search. The cool thing is that if you already have the file open, it just pulls open that tab. The trouble is that these two features don&amp;rsquo;t play well together. If I want to edit an already-open file to the front of my selected group but the file is in some other group, Sublime will open another view on that file. &lt;/p&gt;

&lt;p&gt;While it can occasionally be useful to see different parts of a file side by side, that&amp;rsquo;s the exception. One consequence is that you end up with a lot of clutter. If you have three groups and you&amp;rsquo;re working with five files, after enough switching you&amp;rsquo;ll have fifteen tabs open instead of just five. Another is that Sublime is a little quirky with more than one instance of a file open. For example, closing a tab triggers the &amp;ldquo;Don&amp;rsquo;t you want to save this?&amp;rdquo; dialog even if there are other instances open. There are other quirks like that. And that EmacsKillRing plugin we talked about earlier is totally broken in this scenario.&lt;/p&gt;

&lt;p&gt;What Sublime should really do is &lt;em&gt;move&lt;/em&gt; the file to the current group if it&amp;rsquo;s open already.&lt;/p&gt;

&lt;h3&gt;Deleting a file should close the file&lt;/h3&gt;

&lt;p&gt;This is the issue that probably causes me the most anguish on a day-to-day basis. You can delete files by right-clicking them off the side bar and clicking delete. Except that it&amp;rsquo;s not. If you have the file open, it&amp;rsquo;ll stay open. &amp;ldquo;Fine&amp;rdquo;, you say, and close it. But ST will think &amp;ldquo;Hmm, that file is different on disk, in that it doesn&amp;rsquo;t exist there. I&amp;rsquo;d better confirm Isaac really doesn&amp;rsquo;t want to save this!&amp;rdquo; and gives me a dialog about whether I want to save the file I JUST DELETED. Like, my intention is literally the opposite of what you&amp;rsquo;re asking about. In fact, it&amp;rsquo;ll do this even if I don&amp;rsquo;t have the file open, because when I right-click on the side bar item, ST opens it in a sort of preview mode, which is normally superuseful, but annoying here because when I close the preview I have to deal with this goddamn dialog.&lt;/p&gt;

&lt;p&gt;If I delete a file, ST should close it.&lt;/p&gt;

&lt;h3&gt;Fewer dialogs&lt;/h3&gt;

&lt;p&gt;Sublime mostly gets out of your way, in that most of the dialogy things are expand out of the top or bottom of your screen and steal focus, as opposed to being a big rude modal dialog. That&amp;rsquo;s a great thing. But Sublime does have big rude dialogs, like &amp;ldquo;There&amp;rsquo;s a new version of Sublime. Would you like to upgrade?&amp;rdquo; or &amp;ldquo;This file has been edited. Would you like to save it?&amp;rdquo;, etc (neither of those are verbatim.) Not only are they jarring, but they&amp;rsquo;re also not very keyboard friendly, and reaching for my mouse to answer a question that could be Y/N makes me sad. Some sort of notification toaster would be better.&lt;/p&gt;

&lt;h3&gt;Some keyboard holes&lt;/h3&gt;

&lt;p&gt;I really hate using my mouse. Looking up, that&amp;rsquo;s actually what most of this is about. In general, Sublime does a good job here, but there are some holes. One in particular is search results. You can search your hole project, and results are displayed in a buffer. It&amp;rsquo;s really nice and Emacsy and well done: &lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/images/search_for_stuff.png"&gt;&lt;img src="/blog/images/search_for_stuff.png" alt="Next, find things" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it doesn&amp;rsquo;t have good keyboard support. You have to actually click on those yellow boxes with your mouse; there&amp;rsquo;s no shortcut for that. You can actually iterate through all the results by hitting F4 as many times as you like, which is also nice, but not the same as being able to simply go to the right occurrence in the results and jump to it is frustrating.&lt;/p&gt;

&lt;p&gt;I also haven&amp;rsquo;t figured out how to pull up the right-click menu with the keyboard, which would be really nice for selecting spelling alternatives.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Some of this I can probably fix with some Python hacking and some patience. Some of it will actually have to be changes in the product. In the meantime, it puts me in this annoying state of &lt;em&gt;almost&lt;/em&gt; having a really great editor, but not quite.&lt;/p&gt;
</content>
  </entry>
</feed>
